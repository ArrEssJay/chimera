{
  "$schema": "https://aka.ms/vscode-chat-modes-schema",
  "version": "1.0",
  "chatModes": [
    {
      "id": "morning-sync",
      "label": "‚òÄÔ∏è Morning Sync",
      "description": "Daily morning workflow: sync issues, review PRs, plan day",
      "instructions": "You are helping with the morning workflow. Follow this sequence:\n\n1. **Sync GitHub Issues**: Run `gh issue list --state open --json number,title,labels,assignees` and update the `issue_tracking_status` Serena memory\n2. **Review Overnight PRs**: Check `gh pr list --state merged --search \"merged:>=$(date -v-1d +%Y-%m-%d)\"`\n3. **Triage New Issues**: List issues with `--label \"needs-triage\"`\n4. **Summarize**: Provide a brief daily status report\n\nUse Serena MCP tools for all memory operations. Keep the workflow under 15 minutes.",
      "tools": ["serena", "terminal", "github"]
    },
    {
      "id": "quick-fix",
      "label": "üîß Quick Fix Mode",
      "description": "For bug fixes < 30min using Serena symbolic search",
      "instructions": "You are in Quick Fix mode (< 30 min tasks). Workflow:\n\n1. **Use Serena symbolic search**: `mcp_serena_find_symbol` to locate code\n2. **Never read entire files**: Use `mcp_serena_get_symbols_overview` first\n3. **Edit at symbol level**: Use `mcp_serena_replace_symbol_body` or `mcp_serena_insert_after_symbol`\n4. **Test locally**: Run relevant tests with coverage check\n5. **Commit & push**: Use descriptive commit messages\n\nNO issue creation needed for quick fixes. Target: 3-5 min per fix.\n\n**Rules:**\n- ‚ùå Don't use read_file (use symbolic search)\n- ‚ùå Don't create new docs (update memories)\n- ‚úÖ Check memories first for context",
      "tools": ["serena", "workspace"]
    },
    {
      "id": "explore",
      "label": "üîç Explore Mode",
      "description": "Code exploration using Serena without reading full files",
      "instructions": "You are in Exploration mode. Use Serena MCP for efficient code discovery:\n\n1. **Start with overview**: `mcp_serena_get_symbols_overview` for file structure\n2. **Find symbols**: `mcp_serena_find_symbol` with `include_body: false` first\n3. **Trace references**: `mcp_serena_find_referencing_symbols` for call graphs\n4. **Search patterns**: `mcp_serena_search_for_pattern` for specific code patterns\n5. **Update memories**: If findings are valuable, update relevant Serena memory\n\n**Efficiency targets:**\n- Token usage < 500 per exploration\n- No full file reads unless absolutely necessary\n- Always check existing memories first\n\n**Output:**\n- Provide architectural summary\n- Suggest which GitHub agent should implement if > 1hr task",
      "tools": ["serena", "workspace"]
    },
    {
      "id": "github-handoff",
      "label": "üöÄ GitHub Handoff",
      "description": "Create issue and assign to GitHub agent for >1hr work",
      "instructions": "You are preparing to hand off work to a GitHub AI agent. Follow this protocol:\n\n1. **Verify scope**: Confirm task is > 1hr (otherwise use Quick Fix mode)\n2. **Check contracts**: Ensure relevant contract files (`contracts/`) are not being modified\n3. **Create issue**: Use template with:\n   - Title: `[Phase X] Feature Name`\n   - Body: Clear acceptance criteria, file ownership, wave/phase info\n   - Labels: phase label + priority (critical/high/medium/low)\n4. **Assign to Copilot**: `gh issue edit <number> --add-assignee \"Copilot\"`\n5. **Update memory**: Add to `issue_tracking_status` Serena memory\n\n**Handoff checklist:**\n- ‚úÖ Issue has clear acceptance criteria\n- ‚úÖ File ownership defined (what agent owns vs reads)\n- ‚úÖ No contract modifications required\n- ‚úÖ Phase/wave is unlocked (check dependencies)\n- ‚úÖ Memory updated",
      "tools": ["github", "serena", "terminal"]
    },
    {
      "id": "pre-pr",
      "label": "‚úÖ Pre-PR Validation",
      "description": "Validate changes before creating PR",
      "instructions": "You are validating changes before PR creation. Run this checklist:\n\n**TypeScript/Frontend:**\n1. `npm run typecheck` - Must pass\n2. `npm run lint` - Must pass  \n3. `npm test -- --coverage` - Must have ‚â•80% coverage\n4. `npm run build` - Must succeed\n\n**Rust/Backend:**\n1. `cargo fmt --check` - Must pass\n2. `cargo clippy -- -D warnings` - No warnings\n3. `cargo test --lib` - All tests pass\n4. Check for `.unwrap()` or `.expect()` in `chimera-core/src/` - FORBIDDEN\n\n**Contract Protection:**\n5. Check `git diff --name-only origin/main` - Ensure no `contracts/` files modified\n\n**General:**\n6. Review commit messages - Should follow conventional commits\n7. Check file ownership - Only files you own should be modified\n\nProvide pass/fail report with specific errors if any check fails.",
      "tools": ["terminal", "workspace", "serena"]
    },
    {
      "id": "evening-review",
      "label": "üåô Evening Review",
      "description": "End of day: review progress, update memories, plan tomorrow",
      "instructions": "You are helping with the evening review workflow:\n\n1. **Check today's progress**: \n   - `gh pr list --state all --search \"created:>=$(date +%Y-%m-%d)\"`\n   - List what was completed vs started\n\n2. **Update Serena memories**:\n   - `issue_tracking_status` - Sync with current GitHub state\n   - `current_tasks_backlog` - Update WIP tasks\n   - `deployment_status` - If anything was deployed\n\n3. **Plan tomorrow**:\n   - List top 3 priorities based on issue labels and dependencies\n   - Suggest which issues to assign to GitHub agents overnight\n   - Note any blockers or dependencies\n\n4. **Commit memory changes**:\n   - Stage: `git add .serena/memories/*.md`\n   - Commit: `git commit -m \"update: evening sync $(date +%Y-%m-%d)\"`\n\nKeep this workflow to 10 minutes max. Focus on strategic planning.",
      "tools": ["github", "serena", "terminal"]
    },
    {
      "id": "memory-sync",
      "label": "üß† Memory Sync",
      "description": "Update Serena memories from current state",
      "instructions": "You are synchronizing Serena memories with current project state:\n\n**Check which memories need updating:**\n1. `issue_tracking_status` - Sync with `gh issue list` (daily)\n2. `repository_configuration` - Update if CI/security config changed\n3. `deployment_status` - Update if deployments occurred\n4. `current_tasks_backlog` - Update WIP tasks\n\n**Memory update protocol:**\n- ‚úÖ Read existing memory first with `mcp_serena_read_memory`\n- ‚úÖ Preserve valuable content, update changed sections\n- ‚úÖ Keep memories concise (< 500 lines)\n- ‚úÖ Delete obsolete memories with `mcp_serena_delete_memory`\n- ‚ùå Don't create new memories without good reason\n- ‚ùå Don't duplicate permanent docs\n\n**After updates:**\n- Commit changes: `git add .serena/memories/*.md && git commit -m \"update: sync memories\"`\n\nTarget: < 5 min for routine syncs.",
      "tools": ["serena", "github", "terminal"]
    },
    {
      "id": "contract-check",
      "label": "üîí Contract Enforcement",
      "description": "Verify no contract violations before committing",
      "instructions": "You are enforcing contract-first development rules:\n\n**Check for violations:**\n1. **Contract file modifications**: \n   - `git diff --name-only origin/main | grep contracts/`\n   - FAIL if any contract files modified without approval\n\n2. **Rust no-panic rule**:\n   - `grep -r \"\\.unwrap()\" chimera-core/src/`\n   - `grep -r \"\\.expect(\" chimera-core/src/`\n   - FAIL if any found (use Result<T, E> instead)\n\n3. **File ownership**:\n   - Check issue description for file ownership\n   - FAIL if modifying files outside your assignment\n\n4. **Import violations**:\n   - Ensure all contract imports are from `contracts/` directory\n   - FAIL if creating duplicate interfaces\n\n**Report format:**\n- ‚úÖ PASS: All contract rules followed\n- ‚ùå FAIL: List specific violations with file:line\n\nIf violations found, provide fix suggestions.",
      "tools": ["terminal", "workspace", "serena"]
    }
  ]
}

name: Contract Enforcement & Parallel Work Orchestration

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # ============================================================================
  # JOB 1: Detect file conflicts with other open PRs
  # ============================================================================
  detect-conflicts:
    name: Detect File Conflicts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup GitHub CLI
        run: |
          gh --version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get files changed in this PR
        id: pr_files
        run: |
          # Get list of files modified in this PR
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | sort)
          echo "Changed files in this PR:"
          echo "$CHANGED_FILES"
          echo "$CHANGED_FILES" > /tmp/pr_files.txt
      
      - name: Get files in other open PRs
        id: other_pr_files
        run: |
          # Get all open PRs except this one
          gh pr list --state open --json number,files --jq ".[] | select(.number != ${{ github.event.pull_request.number }}) | .files[].path" | sort | uniq > /tmp/other_pr_files.txt || touch /tmp/other_pr_files.txt
          
          echo "Files in other open PRs:"
          cat /tmp/other_pr_files.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for file conflicts
        run: |
          if [ ! -s /tmp/other_pr_files.txt ]; then
            echo "‚úÖ No other open PRs - no conflicts possible"
            exit 0
          fi
          
          # Find overlapping files
          CONFLICTS=$(comm -12 /tmp/pr_files.txt /tmp/other_pr_files.txt)
          
          if [ ! -z "$CONFLICTS" ]; then
            echo "‚ö†Ô∏è WARNING: File conflicts detected with other open PRs!"
            echo ""
            echo "The following files are being modified in parallel:"
            echo "$CONFLICTS"
            echo ""
            echo "### ‚ö†Ô∏è Parallel Work Conflict Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following files are being modified in other open PRs:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$CONFLICTS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Coordinate with other agents/PRs" >> $GITHUB_STEP_SUMMARY
            echo "2. Consider waiting for their PRs to merge" >> $GITHUB_STEP_SUMMARY
            echo "3. Or ensure you're working on different sections of the file" >> $GITHUB_STEP_SUMMARY
            
            exit 1
          else
            echo "‚úÖ No file conflicts detected - safe to proceed"
            echo "### ‚úÖ No File Conflicts" >> $GITHUB_STEP_SUMMARY
            echo "This PR does not conflict with other open PRs." >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # JOB 2: Verify contract files are not modified
  # ============================================================================
  verify-contracts-locked:
    name: Verify Contracts Unchanged
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if contract files were modified
        run: |
          git fetch origin main
          MODIFIED_CONTRACTS=$(git diff --name-only origin/main...HEAD | grep "^contracts/" || true)
          
          if [ ! -z "$MODIFIED_CONTRACTS" ]; then
            echo "‚ùå ERROR: Contract files were modified!"
            echo ""
            echo "The following contract files were changed:"
            echo "$MODIFIED_CONTRACTS"
            echo ""
            echo "### ‚ùå Contract Violation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Contract files are LOCKED and cannot be modified without approval.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Modified contracts:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$MODIFIED_CONTRACTS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To modify contracts:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Open an issue explaining the need" >> $GITHUB_STEP_SUMMARY
            echo "2. Get maintainer approval" >> $GITHUB_STEP_SUMMARY
            echo "3. Update both Rust and TypeScript versions" >> $GITHUB_STEP_SUMMARY
            echo "4. Update all implementations" >> $GITHUB_STEP_SUMMARY
            
            exit 1
          else
            echo "‚úÖ Contract files unchanged - compliance verified"
            echo "### ‚úÖ Contract Compliance" >> $GITHUB_STEP_SUMMARY
            echo "No contract files were modified." >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # JOB 3: Validate agent follows file ownership rules
  # ============================================================================
  validate-file-ownership:
    name: Validate File Ownership
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract agent assignment from PR
        id: agent_info
        run: |
          # Try to extract agent assignment from PR description or title
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Look for patterns like "Agent: button-component" or "Task: Button Component"
          AGENT_TASK=$(echo "$PR_TITLE" | grep -oE "(Button|Select|Panel|Tooltip|Badge|BitGenerator|NoiseGenerator)" || echo "unknown")
          echo "agent_task=$AGENT_TASK" >> $GITHUB_OUTPUT
          echo "Detected agent task: $AGENT_TASK"
      
      - name: Check file ownership rules
        run: |
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          AGENT_TASK="${{ steps.agent_info.outputs.agent_task }}"
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo ""
          
          # Check if files match expected ownership patterns
          # This is a simple heuristic - can be made more sophisticated
          
          if echo "$CHANGED_FILES" | grep -E "(Button|Select|Panel|Tooltip|Badge)" | grep -qv "$AGENT_TASK"; then
            echo "‚ö†Ô∏è Warning: PR might be touching files outside its assigned component"
            echo "### ‚ö†Ô∏è File Ownership Warning" >> $GITHUB_STEP_SUMMARY
            echo "This PR may be modifying files outside its assigned scope." >> $GITHUB_STEP_SUMMARY
            echo "Please verify this is intentional." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ File ownership looks correct"
            echo "### ‚úÖ File Ownership OK" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # JOB 4: Comment on PR with parallel work status
  # ============================================================================
  parallel-work-status:
    name: Report Parallel Work Status
    runs-on: ubuntu-latest
    needs: [detect-conflicts, verify-contracts-locked]
    if: always()
    
    steps:
      - name: Setup GitHub CLI
        run: gh --version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get all open PRs
        id: open_prs
        run: |
          PR_COUNT=$(gh pr list --state open --json number --jq 'length' --repo ${{ github.repository }})
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment on PR with status
        uses: actions/github-script@v8
        with:
          script: |
            const prCount = ${{ steps.open_prs.outputs.pr_count }};
            const conflictResult = '${{ needs.detect-conflicts.result }}';
            const contractResult = '${{ needs.verify-contracts-locked.result }}';
            
            const conflictStatus = conflictResult === 'success' ? '‚úÖ No conflicts' : '‚ö†Ô∏è Conflicts detected';
            const contractStatus = contractResult === 'success' ? '‚úÖ Compliant' : '‚ùå Violation';
            
            const body = `## ü§ñ Parallel Work Status
            
            | Check | Status |
            |-------|--------|
            | File Conflicts | ${conflictStatus} |
            | Contract Compliance | ${contractStatus} |
            | Open PRs | ${prCount} PRs in flight |
            
            ${conflictResult === 'success' && contractResult === 'success' 
              ? '‚úÖ **This PR is safe to proceed with parallel development!**' 
              : '‚ö†Ô∏è **Review warnings above before proceeding**'}
            
            ---
            
            ### üìã Parallel Development Guidelines
            
            - Each agent should own distinct files
            - Never modify contract files (\`contracts/\`)
            - Wait for dependent PRs to merge before starting dependent work
            - Use feature branches for parallel work
            
            See [\`docs/parallel-task-strategy.md\`](../blob/main/docs/parallel-task-strategy.md) for details.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

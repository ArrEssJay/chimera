name: WASM Core Validation

on:
  pull_request:
    paths:
      - 'chimera-core/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

jobs:
  rust-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "."
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy (strict)
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: No panics policy check
        run: |
          echo "üîç Checking for .unwrap() and .expect() in core code..."
          UNWRAPS=$(grep -r "\.unwrap()" chimera-core/src/ || true)
          EXPECTS=$(grep -r "\.expect(" chimera-core/src/ || true)
          
          if [ ! -z "$UNWRAPS" ]; then
            echo "‚ùå ERROR: Found .unwrap() calls in chimera-core/src/"
            echo "$UNWRAPS"
            echo ""
            echo "Please use proper error handling with Result types instead."
            exit 1
          fi
          
          if [ ! -z "$EXPECTS" ]; then
            echo "‚ö†Ô∏è  WARNING: Found .expect() calls in chimera-core/src/"
            echo "$EXPECTS"
            echo ""
            echo "Consider using proper error handling with Result types."
            # Don't fail on .expect(), just warn
          fi
          
          echo "‚úÖ No .unwrap() found in core code"
      
      - name: Run unit tests
        run: cargo test --lib --all-features
      
      - name: Run integration tests
        run: cargo test --test '*' --all-features
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM (chimera-core)
        working-directory: ./chimera-core
        run: wasm-pack build --target web --out-dir ../chimera-web/pkg
      
      - name: WASM size check (< 5MB)
        run: |
          WASM_FILE="chimera-web/pkg/chimera_core_bg.wasm"
          if [ -f "$WASM_FILE" ]; then
            SIZE=$(stat -f%z "$WASM_FILE" 2>/dev/null || stat -c%s "$WASM_FILE")
            SIZE_MB=$(echo "scale=2; $SIZE / 1048576" | bc)
            echo "üì¶ WASM size: ${SIZE_MB}MB"
            
            if [ $SIZE -gt 5242880 ]; then  # 5MB = 5*1024*1024
              echo "‚ùå WASM binary too large: ${SIZE_MB}MB (limit: 5MB)"
              echo "Consider:"
              echo "  - Enabling wasm-opt optimization"
              echo "  - Removing unused dependencies"
              echo "  - Using dynamic imports"
              exit 1
            fi
            
            echo "‚úÖ WASM size within 5MB limit"
          else
            echo "‚ùå WASM file not found at $WASM_FILE"
            exit 1
          fi
      
      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: chimera-web/pkg/
          retention-days: 7
  
  typescript-integration:
    needs: rust-validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./chimera-web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: wasm-build
          path: chimera-web/pkg/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: chimera-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript check (with WASM types)
        run: npm run typecheck
      
      - name: Test WASM integration
        run: npm test -- --testPathPattern=wasm --watchAll=false
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## ü¶Ä WASM Build Results
            
            ‚úÖ Rust tests passed
            ‚úÖ WASM binary built successfully
            ‚úÖ WASM size check passed (< 5MB)
            ‚úÖ TypeScript types generated
            ‚úÖ WASM integration tests passed
            
            **Ready to merge!**
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
